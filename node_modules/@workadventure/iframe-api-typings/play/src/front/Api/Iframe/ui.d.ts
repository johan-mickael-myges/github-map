import type { Observable } from "rxjs";
import { Subject } from "rxjs";
import type { RequireOnlyOne } from "../types";
import { IframeApiContribution } from "./IframeApiContribution";
import type { ButtonDescriptor } from "./Ui/ButtonDescriptor";
import { Popup } from "./Ui/Popup";
import { ActionMessage } from "./Ui/ActionMessage";
import { Menu } from "./Ui/Menu";
import type { UIWebsiteCommands } from "./Ui/UIWebsite";
import { RemotePlayer } from "./Players/RemotePlayer";
import type { WorkadventureModalCommands } from "./Ui/Modal";
import { WorkAdventureButtonActionBarCommands } from "./Ui/ButtonActionBar";
import { WorkadventureBannerCommands } from "./Ui/Banner";
interface MenuDescriptor {
    callback?: (commandDescriptor: string) => void;
    iframe?: string;
    allowApi?: boolean;
    /**
     * A unique technical key identifying this menu
     */
    key?: string;
}
export type MenuOptions = RequireOnlyOne<MenuDescriptor, "callback" | "iframe">;
export interface ActionMessageOptions {
    message: string;
    type?: "message" | "warning";
    callback: () => void;
}
export declare class ActionsMenuAction {
    private remotePlayer;
    private key;
    private callback;
    constructor(remotePlayer: RemotePlayer, key: string, callback: () => void);
    call(): void;
    remove(): void;
}
export declare class WorkAdventureUiCommands extends IframeApiContribution<WorkAdventureUiCommands> {
    readonly _onRemotePlayerClicked: Subject<RemotePlayer>;
    readonly onRemotePlayerClicked: Observable<RemotePlayer>;
    private currentlyClickedRemotePlayer?;
    constructor();
    callbacks: ({
        type: "buttonClickedEvent";
        callback: (event: {
            popupId: number;
            buttonId: number;
        }) => void;
    } | {
        type: "menuItemClicked";
        callback: (event: {
            menuItem: string;
        }) => void;
    } | {
        type: "messageTriggered";
        callback: (event: {
            uuid: string;
        }) => void;
    } | {
        type: "remotePlayerClickedEvent";
        callback: (event: {
            outlineColor?: number | undefined;
            name: string;
            availabilityStatus: string;
            position: {
                x: number;
                y: number;
            };
            userUuid: string;
            variables: Map<string, unknown>;
            playerId: number;
        }) => void;
    } | {
        type: "actionsMenuActionClickedEvent";
        callback: (event: {
            id: number;
            actionName: string;
        }) => void;
    })[];
    /**
     * Open a popup in front of the game.
     * {@link https://workadventu.re/map-building/api-ui.md#opening-a-popup | Website documentation}
     *
     * @param {string} targetObject Targeted object name
     * @param {string} message Message to display
     * @param {ButtonDescriptor[]} buttons Buttons displayed below popup
     * @returns {Popup} Popup created
     */
    openPopup(targetObject: string, message: string, buttons: ButtonDescriptor[]): Popup;
    /**
     * Add a custom menu item containing the text commandDescriptor in the navbar of the menu. options attribute accepts an object.
     * {@link https://workadventu.re/map-building/api-ui.md#add-custom-menu | Website documentation}
     *
     * @param {string} commandDescriptor Command description
     * @param {MenuOptions | ((commandDescriptor: string) => void)} options Manu options
     * @returns {Menu} Menu created
     */
    registerMenuCommand(commandDescriptor: string, options: MenuOptions | ((commandDescriptor: string) => void)): Menu;
    /**
     * Retrieves a menu from its key.
     * Keys are set when the menu is created with `registerMenuCommand`
     * In addition, the standard menus have the following keys: "settings", "profile", "invite", "credit", "globalMessages", "contact", "report"
     */
    getMenuCommand(key: string): Promise<Menu>;
    addActionsMenuKeyToRemotePlayer(id: number, actionKey: string): void;
    removeActionsMenuKeyFromRemotePlayer(id: number, actionKey: string): void;
    /**
     * Display a bubble like in proximity meeting (Draft function).
     * Todo: enhanced bubble functions behaviors
     */
    displayBubble(): void;
    /**
     * Remove a bubble like in proximity meeting.
     * Todo: enhanced bubble functions behaviors
     */
    removeBubble(): void;
    /**
     * Displays a message at the bottom of the screen (that will disappear when space bar is pressed).
     * {@link https://workadventu.re/map-building/api-ui.md#awaiting-user-confirmation-with-space-bar | Website documentation}
     *
     * @param {ActionMessageOptions} actionMessageOptions Action options
     * @returns {ActionMessage} Trigger action message
     */
    displayActionMessage(actionMessageOptions: ActionMessageOptions): ActionMessage;
    get website(): UIWebsiteCommands;
    get modal(): WorkadventureModalCommands;
    get actionBar(): WorkAdventureButtonActionBarCommands;
    get banner(): WorkadventureBannerCommands;
}
declare const _default: WorkAdventureUiCommands;
export default _default;
