import { Subject } from "rxjs";
import { IframeApiContribution } from "../IframeApiContribution";
import { RemotePlayer } from "../Players/RemotePlayer";
export declare class WorkadventureProximityMeetingCommands extends IframeApiContribution<WorkadventureProximityMeetingCommands> {
    callbacks: ({
        type: "joinProximityMeetingEvent";
        callback: (event: {
            users: {
                outlineColor?: number | undefined;
                name: string;
                availabilityStatus: string;
                position: {
                    x: number;
                    y: number;
                };
                userUuid: string;
                variables: Map<string, unknown>;
                playerId: number;
            }[];
        }) => void;
    } | {
        type: "participantJoinProximityMeetingEvent";
        callback: (event: {
            user: {
                outlineColor?: number | undefined;
                name: string;
                availabilityStatus: string;
                position: {
                    x: number;
                    y: number;
                };
                userUuid: string;
                variables: Map<string, unknown>;
                playerId: number;
            };
        }) => void;
    } | {
        type: "participantLeaveProximityMeetingEvent";
        callback: (event: {
            user: {
                outlineColor?: number | undefined;
                name: string;
                availabilityStatus: string;
                position: {
                    x: number;
                    y: number;
                };
                userUuid: string;
                variables: Map<string, unknown>;
                playerId: number;
            };
        }) => void;
    } | {
        type: "leaveProximityMeetingEvent";
        callback: (event: undefined) => void;
    })[];
    /**
     * Detecting when the user enter on a meeting.
     * {@link https://workadventu.re/map-building/api-player.md#detecting-when-the-user-entersleaves-a-meeting | Website documentation}
     *
     * @returns {Subject<RemotePlayer[]>} Observable who return the joined users
     */
    onJoin(): Subject<RemotePlayer[]>;
    /**
     * Detecting when a participant joined on the current meeting.
     * {@link https://workadventu.re/map-building/api-player.md#detecting-when-a-participant-entersleaves-the-current-meeting | Website documentation}
     *
     * @returns {Subject<RemotePlayer>} Observable who return the joined user
     */
    onParticipantJoin(): Subject<RemotePlayer>;
    /**
     * Detecting when a participant left on the current meeting.
     * {@link https://workadventu.re/map-building/api-player.md#detecting-when-a-participant-entersleaves-the-current-meeting | Website documentation}
     *
     * @returns {Subject<RemotePlayer>} Observable who return the left user
     */
    onParticipantLeave(): Subject<RemotePlayer>;
    /**
     * Detecting when the user leave on a meeting.
     * {@link https://workadventu.re/map-building/api-player.md#detecting-when-the-user-entersleaves-a-meeting | Website documentation}
     */
    onLeave(): Subject<void>;
    playSound(url: string): Promise<void>;
}
declare const _default: WorkadventureProximityMeetingCommands;
export default _default;
